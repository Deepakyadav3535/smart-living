(function ($) {
    jQuery.ptTimeSelect = {}; jQuery.ptTimeSelect.version = "__BUILD_VERSION_NUMBER__"; jQuery.ptTimeSelect.options = { containerClass: undefined, containerWidth: '22em', hoursLabel: 'Hour', minutesLabel: 'Minutes', setButtonLabel: 'Set', popupImage: undefined, onFocusDisplay: true, zIndex: 10, onBeforeShow: undefined, onClose: undefined }; jQuery.ptTimeSelect._ptTimeSelectInit = function () {
        jQuery(document).ready(function () {
            if (!jQuery('#ptTimeSelectCntr').length) {
                jQuery("body").append('<div id="ptTimeSelectCntr" class="">'
                    + '        <div class="ui-widget ui-widget-content ui-corner-all">'
                    + '        <div class="ui-widget-header ui-corner-all">'
                    + '            <div id="ptTimeSelectCloseCntr" style="float: right;">'
                    + '                <a href="javascript: void(0);" onclick="jQuery.ptTimeSelect.closeCntr();" '
                    + '                        onmouseover="jQuery(this).removeClass(\'ui-state-default\').addClass(\'ui-state-hover\');" '
                    + '                        onmouseout="jQuery(this).removeClass(\'ui-state-hover\').addClass(\'ui-state-default\');"'
                    + '                        class="ui-corner-all ui-state-default">'
                    + '                    <span class="ui-icon ui-icon-circle-close">X</span>'
                    + '                </a>'
                    + '            </div>'
                    + '            <div id="ptTimeSelectUserTime" style="float: left;">'
                    + '                <span id="ptTimeSelectUserSelHr">1</span> : '
                    + '                <span id="ptTimeSelectUserSelMin">00</span> '
                    + '                <span id="ptTimeSelectUserSelAmPm">AM</span>'
                    + '            </div>'
                    + '            <br style="clear: both;" /><div></div>'
                    + '        </div>'
                    + '        <div class="ui-widget-content ui-corner-all">'
                    + '            <div>'
                    + '                <div class="ptTimeSelectTimeLabelsCntr">'
                    + '                    <div class="ptTimeSelectLeftPane" style="width: 50%; text-align: center; float: left;" class="">Hour</div>'
                    + '                    <div class="ptTimeSelectRightPane" style="width: 50%; text-align: center; float: left;">Minutes</div>'
                    + '                </div>'
                    + '                <div>'
                    + '                    <div style="float: left; width: 50%;">'
                    + '                        <div class="ui-widget-content ptTimeSelectLeftPane">'
                    + '                            <div class="ptTimeSelectHrAmPmCntr">'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);" '
                    + '                                        style="display: block; width: 45%; float: left;">AM</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);" '
                    + '                                        style="display: block; width: 45%; float: left;">PM</a>'
                    + '                                <br style="clear: left;" /><div></div>'
                    + '                            </div>'
                    + '                            <div class="ptTimeSelectHrCntr">'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">1</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">2</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">3</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">4</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">5</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">6</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">7</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">8</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">9</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">10</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">11</a>'
                    + '                                <a class="ptTimeSelectHr ui-state-default" href="javascript: void(0);">12</a>'
                    + '                                <br style="clear: left;" /><div></div>'
                    + '                            </div>'
                    + '                        </div>'
                    + '                    </div>'
                    + '                    <div style="width: 50%; float: left;">'
                    + '                        <div class="ui-widget-content ptTimeSelectRightPane">'
                    + '                            <div class="ptTimeSelectMinCntr">'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">00</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">05</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">10</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">15</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">20</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">25</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">30</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">35</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">40</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">45</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">50</a>'
                    + '                                <a class="ptTimeSelectMin ui-state-default" href="javascript: void(0);">55</a>'
                    + '                                <br style="clear: left;" /><div></div>'
                    + '                            </div>'
                    + '                        </div>'
                    + '                    </div>'
                    + '                </div>'
                    + '            </div>'
                    + '            <div style="clear: left;"></div>'
                    + '        </div>'
                    + '        <div id="ptTimeSelectSetButton">'
                    + '            <a href="javascript: void(0);" onclick="jQuery.ptTimeSelect.setTime()"'
                    + '                    onmouseover="jQuery(this).removeClass(\'ui-state-default\').addClass(\'ui-state-hover\');" '
                    + '                        onmouseout="jQuery(this).removeClass(\'ui-state-hover\').addClass(\'ui-state-default\');"'
                    + '                        class="ui-corner-all ui-state-default">'
                    + '                SET'
                    + '            </a>'
                    + '            <br style="clear: both;" /><div></div>'
                    + '        </div>'
                    + '        <!--[if lte IE 6.5]>'
                    + '            <iframe style="display:block; position:absolute;top: 0;left:0;z-index:-1;'
                    + '                filter:Alpha(Opacity=\'0\');width:3000px;height:3000px"></iframe>'
                    + '        <![endif]-->'
                    + '    </div></div>'); var e = jQuery('#ptTimeSelectCntr'); e.find('.ptTimeSelectMin').bind("click", function () { jQuery.ptTimeSelect.setMin($(this).text()); }); e.find('.ptTimeSelectHr').bind("click", function () { jQuery.ptTimeSelect.setHr($(this).text()); }); $(document).mousedown(jQuery.ptTimeSelect._doCheckMouseClick);
            }
        });
    }(); jQuery.ptTimeSelect.setHr = function (h) { if (h.toLowerCase() == "am" || h.toLowerCase() == "pm") { jQuery('#ptTimeSelectUserSelAmPm').empty().append(h); } else { jQuery('#ptTimeSelectUserSelHr').empty().append(h); } }; jQuery.ptTimeSelect.setMin = function (m) { jQuery('#ptTimeSelectUserSelMin').empty().append(m); }; jQuery.ptTimeSelect.setTime = function () {
        var tSel = jQuery('#ptTimeSelectUserSelHr').text()
            + ":"
            + jQuery('#ptTimeSelectUserSelMin').text()
            + " "
            + jQuery('#ptTimeSelectUserSelAmPm').text(); var i = jQuery(".isPtTimeSelectActive"); if (i.attr('type') == 'time') { i.val(jQuery.ptTimeSelect.convertFromAMPM(tSel)); } else { i.val(tSel); }
        i.trigger('change'); this.closeCntr();
    }; jQuery.ptTimeSelect.convertFrom24 = function (time) {
        time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time]; if (time.length > 1) { time = time.slice(1); time[5] = +time[0] < 12 ? ' AM' : ' PM'; time[0] = +time[0] % 12 || 12; }
        return time.join('');
    }; jQuery.ptTimeSelect.convertFromAMPM = function (time) { var hours = Number(time.match(/^(\d+)/)[1]); var minutes = Number(time.match(/:(\d+)/)[1]); var AMPM = time.match(/\s(.*)$/)[1]; if (AMPM == "PM" && hours < 12) hours = hours + 12; if (AMPM == "AM" && hours == 12) hours = hours - 12; var sHours = hours.toString(); var sMinutes = minutes.toString(); if (hours < 10) sHours = "0" + sHours; if (minutes < 10) sMinutes = "0" + sMinutes; return sHours + ":" + sMinutes; }; jQuery.ptTimeSelect.openCntr = function (ele) {
        jQuery.ptTimeSelect.closeCntr(); jQuery(".isPtTimeSelectActive").removeClass("isPtTimeSelectActive"); var cntr = jQuery("#ptTimeSelectCntr"); var i = jQuery(ele).eq(0).addClass("isPtTimeSelectActive"); var opt = i.data("ptTimeSelectOptions"); var style = i.offset(); var time = ''; style['z-index'] = opt.zIndex; style.top = (style.top + i.outerHeight()); if (opt.containerWidth) { style.width = opt.containerWidth; }
        if (opt.containerClass) { cntr.addClass(opt.containerClass); }
        cntr.css(style); if (i.attr('type') == 'time') { time = jQuery.ptTimeSelect.convertFrom24(i.val()); } else { time = i.val(); }
        var hr = 1; var min = '00'; var tm = 'AM'; if (time) { var re = /([0-9]{1,2}).*:.*([0-9]{2}).*(PM|AM)/i; var match = re.exec(time); if (match) { hr = match[1] || 1; min = match[2] || '00'; tm = match[3] || 'AM'; } }
        cntr.find("#ptTimeSelectUserSelHr").empty().append(hr); cntr.find("#ptTimeSelectUserSelMin").empty().append(min); cntr.find("#ptTimeSelectUserSelAmPm").empty().append(tm); cntr.find(".ptTimeSelectTimeLabelsCntr .ptTimeSelectLeftPane").empty().append(opt.hoursLabel); cntr.find(".ptTimeSelectTimeLabelsCntr .ptTimeSelectRightPane").empty().append(opt.minutesLabel); cntr.find("#ptTimeSelectSetButton a").empty().append(opt.setButtonLabel); if (opt.onBeforeShow) { opt.onBeforeShow(i, cntr); }
        cntr.slideDown("fast");
    }; jQuery.ptTimeSelect.closeCntr = function (i) {
        var e = $("#ptTimeSelectCntr"); if (e.is(":visible") == true) {
            if (jQuery.support.tbody == false) { if (!(e[0].offsetWidth > 0) && !(e[0].offsetHeight > 0)) { return; } }
            jQuery('#ptTimeSelectCntr').css("display", "none").removeClass().css("width", ""); if (!i) { i = $(".isPtTimeSelectActive"); }
            if (i) { var opt = i.removeClass("isPtTimeSelectActive").data("ptTimeSelectOptions"); if (opt && opt.onClose) { opt.onClose(i); } }
        }
        return;
    }; jQuery.ptTimeSelect._doCheckMouseClick = function (ev) {
        if (!$("#ptTimeSelectCntr:visible").length) { return; }
        if (!jQuery(ev.target).closest("#ptTimeSelectCntr").length && jQuery(ev.target).not("input.isPtTimeSelectActive").length) { jQuery.ptTimeSelect.closeCntr(); }
    }; jQuery.fn.ptTimeSelect = function (opt) {
        return this.each(function () {
            if (this.nodeName.toLowerCase() != 'input') return; var e = jQuery(this); if (e.hasClass('hasPtTimeSelect')) { return this; }
            var thisOpt = {}; thisOpt = $.extend(thisOpt, jQuery.ptTimeSelect.options, opt); e.addClass('hasPtTimeSelect').data("ptTimeSelectOptions", thisOpt); if (thisOpt.popupImage || !thisOpt.onFocusDisplay) {
                var img = jQuery('<span>&nbsp;</span><a href="javascript:" onclick="' +
                    'jQuery.ptTimeSelect.openCntr(jQuery(this).data(\'ptTimeSelectEle\'));">' +
                    thisOpt.popupImage + '</a>').data("ptTimeSelectEle", e); e.after(img);
            }
            if (thisOpt.onFocusDisplay) { e.focus(function () { jQuery.ptTimeSelect.openCntr(this); }); }
            return this;
        });
    };
})(jQuery);/*!
* Isotope PACKAGED v2.1.1
* Filter & sort magical layouts
* http://isotope.metafizzy.co
*/(function (t) { function e() { } function i(t) { function i(e) { e.prototype.option || (e.prototype.option = function (e) { t.isPlainObject(e) && (this.options = t.extend(!0, this.options, e)) }) } function n(e, i) { t.fn[e] = function (n) { if ("string" == typeof n) { for (var s = o.call(arguments, 1), a = 0, u = this.length; u > a; a++) { var p = this[a], h = t.data(p, e); if (h) if (t.isFunction(h[n]) && "_" !== n.charAt(0)) { var f = h[n].apply(h, s); if (void 0 !== f) return f } else r("no such method '" + n + "' for " + e + " instance"); else r("cannot call methods on " + e + " prior to initialization; " + "attempted to call '" + n + "'") } return this } return this.each(function () { var o = t.data(this, e); o ? (o.option(n), o._init()) : (o = new i(this, n), t.data(this, e, o)) }) } } if (t) { var r = "undefined" == typeof console ? e : function (t) { console.error(t) }; return t.bridget = function (t, e) { i(e), n(t, e) }, t.bridget } } var o = Array.prototype.slice; "function" == typeof define && define.amd ? define("jquery-bridget/jquery.bridget", ["jquery"], i) : "object" == typeof exports ? i(require("jquery")) : i(t.jQuery) })(window), function (t) { function e(e) { var i = t.event; return i.target = i.target || i.srcElement || e, i } var i = document.documentElement, o = function () { }; i.addEventListener ? o = function (t, e, i) { t.addEventListener(e, i, !1) } : i.attachEvent && (o = function (t, i, o) { t[i + o] = o.handleEvent ? function () { var i = e(t); o.handleEvent.call(o, i) } : function () { var i = e(t); o.call(t, i) }, t.attachEvent("on" + i, t[i + o]) }); var n = function () { }; i.removeEventListener ? n = function (t, e, i) { t.removeEventListener(e, i, !1) } : i.detachEvent && (n = function (t, e, i) { t.detachEvent("on" + e, t[e + i]); try { delete t[e + i] } catch (o) { t[e + i] = void 0 } }); var r = { bind: o, unbind: n }; "function" == typeof define && define.amd ? define("eventie/eventie", r) : "object" == typeof exports ? module.exports = r : t.eventie = r }(this), function (t) { function e(t) { "function" == typeof t && (e.isReady ? t() : s.push(t)) } function i(t) { var i = "readystatechange" === t.type && "complete" !== r.readyState; e.isReady || i || o() } function o() { e.isReady = !0; for (var t = 0, i = s.length; i > t; t++) { var o = s[t]; o() } } function n(n) { return "complete" === r.readyState ? o() : (n.bind(r, "DOMContentLoaded", i), n.bind(r, "readystatechange", i), n.bind(t, "load", i)), e } var r = t.document, s = []; e.isReady = !1, "function" == typeof define && define.amd ? define("doc-ready/doc-ready", ["eventie/eventie"], n) : "object" == typeof exports ? module.exports = n(require("eventie")) : t.docReady = n(t.eventie) }(window), function () { function t() { } function e(t, e) { for (var i = t.length; i--;)if (t[i].listener === e) return i; return -1 } function i(t) { return function () { return this[t].apply(this, arguments) } } var o = t.prototype, n = this, r = n.EventEmitter; o.getListeners = function (t) { var e, i, o = this._getEvents(); if (t instanceof RegExp) { e = {}; for (i in o) o.hasOwnProperty(i) && t.test(i) && (e[i] = o[i]) } else e = o[t] || (o[t] = []); return e }, o.flattenListeners = function (t) { var e, i = []; for (e = 0; t.length > e; e += 1)i.push(t[e].listener); return i }, o.getListenersAsObject = function (t) { var e, i = this.getListeners(t); return i instanceof Array && (e = {}, e[t] = i), e || i }, o.addListener = function (t, i) { var o, n = this.getListenersAsObject(t), r = "object" == typeof i; for (o in n) n.hasOwnProperty(o) && -1 === e(n[o], i) && n[o].push(r ? i : { listener: i, once: !1 }); return this }, o.on = i("addListener"), o.addOnceListener = function (t, e) { return this.addListener(t, { listener: e, once: !0 }) }, o.once = i("addOnceListener"), o.defineEvent = function (t) { return this.getListeners(t), this }, o.defineEvents = function (t) { for (var e = 0; t.length > e; e += 1)this.defineEvent(t[e]); return this }, o.removeListener = function (t, i) { var o, n, r = this.getListenersAsObject(t); for (n in r) r.hasOwnProperty(n) && (o = e(r[n], i), -1 !== o && r[n].splice(o, 1)); return this }, o.off = i("removeListener"), o.addListeners = function (t, e) { return this.manipulateListeners(!1, t, e) }, o.removeListeners = function (t, e) { return this.manipulateListeners(!0, t, e) }, o.manipulateListeners = function (t, e, i) { var o, n, r = t ? this.removeListener : this.addListener, s = t ? this.removeListeners : this.addListeners; if ("object" != typeof e || e instanceof RegExp) for (o = i.length; o--;)r.call(this, e, i[o]); else for (o in e) e.hasOwnProperty(o) && (n = e[o]) && ("function" == typeof n ? r.call(this, o, n) : s.call(this, o, n)); return this }, o.removeEvent = function (t) { var e, i = typeof t, o = this._getEvents(); if ("string" === i) delete o[t]; else if (t instanceof RegExp) for (e in o) o.hasOwnProperty(e) && t.test(e) && delete o[e]; else delete this._events; return this }, o.removeAllListeners = i("removeEvent"), o.emitEvent = function (t, e) { var i, o, n, r, s = this.getListenersAsObject(t); for (n in s) if (s.hasOwnProperty(n)) for (o = s[n].length; o--;)i = s[n][o], i.once === !0 && this.removeListener(t, i.listener), r = i.listener.apply(this, e || []), r === this._getOnceReturnValue() && this.removeListener(t, i.listener); return this }, o.trigger = i("emitEvent"), o.emit = function (t) { var e = Array.prototype.slice.call(arguments, 1); return this.emitEvent(t, e) }, o.setOnceReturnValue = function (t) { return this._onceReturnValue = t, this }, o._getOnceReturnValue = function () { return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0 }, o._getEvents = function () { return this._events || (this._events = {}) }, t.noConflict = function () { return n.EventEmitter = r, t }, "function" == typeof define && define.amd ? define("eventEmitter/EventEmitter", [], function () { return t }) : "object" == typeof module && module.exports ? module.exports = t : n.EventEmitter = t }.call(this), function (t) { function e(t) { if (t) { if ("string" == typeof o[t]) return t; t = t.charAt(0).toUpperCase() + t.slice(1); for (var e, n = 0, r = i.length; r > n; n++)if (e = i[n] + t, "string" == typeof o[e]) return e } } var i = "Webkit Moz ms Ms O".split(" "), o = document.documentElement.style; "function" == typeof define && define.amd ? define("get-style-property/get-style-property", [], function () { return e }) : "object" == typeof exports ? module.exports = e : t.getStyleProperty = e }(window), function (t) { function e(t) { var e = parseFloat(t), i = -1 === t.indexOf("%") && !isNaN(e); return i && e } function i() { } function o() { for (var t = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 }, e = 0, i = s.length; i > e; e++) { var o = s[e]; t[o] = 0 } return t } function n(i) { function n() { if (!d) { d = !0; var o = t.getComputedStyle; if (p = function () { var t = o ? function (t) { return o(t, null) } : function (t) { return t.currentStyle }; return function (e) { var i = t(e); return i || r("Style returned " + i + ". Are you running this code in a hidden iframe on Firefox? " + "See http://bit.ly/getsizebug1"), i } }(), h = i("boxSizing")) { var n = document.createElement("div"); n.style.width = "200px", n.style.padding = "1px 2px 3px 4px", n.style.borderStyle = "solid", n.style.borderWidth = "1px 2px 3px 4px", n.style[h] = "border-box"; var s = document.body || document.documentElement; s.appendChild(n); var a = p(n); f = 200 === e(a.width), s.removeChild(n) } } } function a(t) { if (n(), "string" == typeof t && (t = document.querySelector(t)), t && "object" == typeof t && t.nodeType) { var i = p(t); if ("none" === i.display) return o(); var r = {}; r.width = t.offsetWidth, r.height = t.offsetHeight; for (var a = r.isBorderBox = !(!h || !i[h] || "border-box" !== i[h]), d = 0, l = s.length; l > d; d++) { var c = s[d], y = i[c]; y = u(t, y); var m = parseFloat(y); r[c] = isNaN(m) ? 0 : m } var g = r.paddingLeft + r.paddingRight, v = r.paddingTop + r.paddingBottom, _ = r.marginLeft + r.marginRight, I = r.marginTop + r.marginBottom, L = r.borderLeftWidth + r.borderRightWidth, z = r.borderTopWidth + r.borderBottomWidth, b = a && f, x = e(i.width); x !== !1 && (r.width = x + (b ? 0 : g + L)); var S = e(i.height); return S !== !1 && (r.height = S + (b ? 0 : v + z)), r.innerWidth = r.width - (g + L), r.innerHeight = r.height - (v + z), r.outerWidth = r.width + _, r.outerHeight = r.height + I, r } } function u(e, i) { if (t.getComputedStyle || -1 === i.indexOf("%")) return i; var o = e.style, n = o.left, r = e.runtimeStyle, s = r && r.left; return s && (r.left = e.currentStyle.left), o.left = i, i = o.pixelLeft, o.left = n, s && (r.left = s), i } var p, h, f, d = !1; return a } var r = "undefined" == typeof console ? i : function (t) { console.error(t) }, s = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"]; "function" == typeof define && define.amd ? define("get-size/get-size", ["get-style-property/get-style-property"], n) : "object" == typeof exports ? module.exports = n(require("desandro-get-style-property")) : t.getSize = n(t.getStyleProperty) }(window), function (t) { function e(t, e) { return t[s](e) } function i(t) { if (!t.parentNode) { var e = document.createDocumentFragment(); e.appendChild(t) } } function o(t, e) { i(t); for (var o = t.parentNode.querySelectorAll(e), n = 0, r = o.length; r > n; n++)if (o[n] === t) return !0; return !1 } function n(t, o) { return i(t), e(t, o) } var r, s = function () { if (t.matchesSelector) return "matchesSelector"; for (var e = ["webkit", "moz", "ms", "o"], i = 0, o = e.length; o > i; i++) { var n = e[i], r = n + "MatchesSelector"; if (t[r]) return r } }(); if (s) { var a = document.createElement("div"), u = e(a, "div"); r = u ? e : n } else r = o; "function" == typeof define && define.amd ? define("matches-selector/matches-selector", [], function () { return r }) : "object" == typeof exports ? module.exports = r : window.matchesSelector = r }(Element.prototype), function (t) { function e(t, e) { for (var i in e) t[i] = e[i]; return t } function i(t) { for (var e in t) return !1; return e = null, !0 } function o(t) { return t.replace(/([A-Z])/g, function (t) { return "-" + t.toLowerCase() }) } function n(t, n, r) { function a(t, e) { t && (this.element = t, this.layout = e, this.position = { x: 0, y: 0 }, this._create()) } var u = r("transition"), p = r("transform"), h = u && p, f = !!r("perspective"), d = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "otransitionend", transition: "transitionend" }[u], l = ["transform", "transition", "transitionDuration", "transitionProperty"], c = function () { for (var t = {}, e = 0, i = l.length; i > e; e++) { var o = l[e], n = r(o); n && n !== o && (t[o] = n) } return t }(); e(a.prototype, t.prototype), a.prototype._create = function () { this._transn = { ingProperties: {}, clean: {}, onEnd: {} }, this.css({ position: "absolute" }) }, a.prototype.handleEvent = function (t) { var e = "on" + t.type; this[e] && this[e](t) }, a.prototype.getSize = function () { this.size = n(this.element) }, a.prototype.css = function (t) { var e = this.element.style; for (var i in t) { var o = c[i] || i; e[o] = t[i] } }, a.prototype.getPosition = function () { var t = s(this.element), e = this.layout.options, i = e.isOriginLeft, o = e.isOriginTop, n = parseInt(t[i ? "left" : "right"], 10), r = parseInt(t[o ? "top" : "bottom"], 10); n = isNaN(n) ? 0 : n, r = isNaN(r) ? 0 : r; var a = this.layout.size; n -= i ? a.paddingLeft : a.paddingRight, r -= o ? a.paddingTop : a.paddingBottom, this.position.x = n, this.position.y = r }, a.prototype.layoutPosition = function () { var t = this.layout.size, e = this.layout.options, i = {}; e.isOriginLeft ? (i.left = this.position.x + t.paddingLeft + "px", i.right = "") : (i.right = this.position.x + t.paddingRight + "px", i.left = ""), e.isOriginTop ? (i.top = this.position.y + t.paddingTop + "px", i.bottom = "") : (i.bottom = this.position.y + t.paddingBottom + "px", i.top = ""), this.css(i), this.emitEvent("layout", [this]) }; var y = f ? function (t, e) { return "translate3d(" + t + "px, " + e + "px, 0)" } : function (t, e) { return "translate(" + t + "px, " + e + "px)" }; a.prototype._transitionTo = function (t, e) { this.getPosition(); var i = this.position.x, o = this.position.y, n = parseInt(t, 10), r = parseInt(e, 10), s = n === this.position.x && r === this.position.y; if (this.setPosition(t, e), s && !this.isTransitioning) return this.layoutPosition(), void 0; var a = t - i, u = e - o, p = {}, h = this.layout.options; a = h.isOriginLeft ? a : -a, u = h.isOriginTop ? u : -u, p.transform = y(a, u), this.transition({ to: p, onTransitionEnd: { transform: this.layoutPosition }, isCleaning: !0 }) }, a.prototype.goTo = function (t, e) { this.setPosition(t, e), this.layoutPosition() }, a.prototype.moveTo = h ? a.prototype._transitionTo : a.prototype.goTo, a.prototype.setPosition = function (t, e) { this.position.x = parseInt(t, 10), this.position.y = parseInt(e, 10) }, a.prototype._nonTransition = function (t) { this.css(t.to), t.isCleaning && this._removeStyles(t.to); for (var e in t.onTransitionEnd) t.onTransitionEnd[e].call(this) }, a.prototype._transition = function (t) { if (!parseFloat(this.layout.options.transitionDuration)) return this._nonTransition(t), void 0; var e = this._transn; for (var i in t.onTransitionEnd) e.onEnd[i] = t.onTransitionEnd[i]; for (i in t.to) e.ingProperties[i] = !0, t.isCleaning && (e.clean[i] = !0); if (t.from) { this.css(t.from); var o = this.element.offsetHeight; o = null } this.enableTransition(t.to), this.css(t.to), this.isTransitioning = !0 }; var m = p && o(p) + ",opacity"; a.prototype.enableTransition = function () { this.isTransitioning || (this.css({ transitionProperty: m, transitionDuration: this.layout.options.transitionDuration }), this.element.addEventListener(d, this, !1)) }, a.prototype.transition = a.prototype[u ? "_transition" : "_nonTransition"], a.prototype.onwebkitTransitionEnd = function (t) { this.ontransitionend(t) }, a.prototype.onotransitionend = function (t) { this.ontransitionend(t) }; var g = { "-webkit-transform": "transform", "-moz-transform": "transform", "-o-transform": "transform" }; a.prototype.ontransitionend = function (t) { if (t.target === this.element) { var e = this._transn, o = g[t.propertyName] || t.propertyName; if (delete e.ingProperties[o], i(e.ingProperties) && this.disableTransition(), o in e.clean && (this.element.style[t.propertyName] = "", delete e.clean[o]), o in e.onEnd) { var n = e.onEnd[o]; n.call(this), delete e.onEnd[o] } this.emitEvent("transitionEnd", [this]) } }, a.prototype.disableTransition = function () { this.removeTransitionStyles(), this.element.removeEventListener(d, this, !1), this.isTransitioning = !1 }, a.prototype._removeStyles = function (t) { var e = {}; for (var i in t) e[i] = ""; this.css(e) }; var v = { transitionProperty: "", transitionDuration: "" }; return a.prototype.removeTransitionStyles = function () { this.css(v) }, a.prototype.removeElem = function () { this.element.parentNode.removeChild(this.element), this.emitEvent("remove", [this]) }, a.prototype.remove = function () { if (!u || !parseFloat(this.layout.options.transitionDuration)) return this.removeElem(), void 0; var t = this; this.on("transitionEnd", function () { return t.removeElem(), !0 }), this.hide() }, a.prototype.reveal = function () { delete this.isHidden, this.css({ display: "" }); var t = this.layout.options; this.transition({ from: t.hiddenStyle, to: t.visibleStyle, isCleaning: !0 }) }, a.prototype.hide = function () { this.isHidden = !0, this.css({ display: "" }); var t = this.layout.options; this.transition({ from: t.visibleStyle, to: t.hiddenStyle, isCleaning: !0, onTransitionEnd: { opacity: function () { this.isHidden && this.css({ display: "none" }) } } }) }, a.prototype.destroy = function () { this.css({ position: "", left: "", right: "", top: "", bottom: "", transition: "", transform: "" }) }, a } var r = t.getComputedStyle, s = r ? function (t) { return r(t, null) } : function (t) { return t.currentStyle }; "function" == typeof define && define.amd ? define("outlayer/item", ["eventEmitter/EventEmitter", "get-size/get-size", "get-style-property/get-style-property"], n) : "object" == typeof exports ? module.exports = n(require("wolfy87-eventemitter"), require("get-size"), require("desandro-get-style-property")) : (t.Outlayer = {}, t.Outlayer.Item = n(t.EventEmitter, t.getSize, t.getStyleProperty)) }(window), function (t) { function e(t, e) { for (var i in e) t[i] = e[i]; return t } function i(t) { return "[object Array]" === f.call(t) } function o(t) { var e = []; if (i(t)) e = t; else if (t && "number" == typeof t.length) for (var o = 0, n = t.length; n > o; o++)e.push(t[o]); else e.push(t); return e } function n(t, e) { var i = l(e, t); -1 !== i && e.splice(i, 1) } function r(t) { return t.replace(/(.)([A-Z])/g, function (t, e, i) { return e + "-" + i }).toLowerCase() } function s(i, s, f, l, c, y) { function m(t, i) { if ("string" == typeof t && (t = a.querySelector(t)), !t || !d(t)) return u && u.error("Bad " + this.constructor.namespace + " element: " + t), void 0; this.element = t, this.options = e({}, this.constructor.defaults), this.option(i); var o = ++g; this.element.outlayerGUID = o, v[o] = this, this._create(), this.options.isInitLayout && this.layout() } var g = 0, v = {}; return m.namespace = "outlayer", m.Item = y, m.defaults = { containerStyle: { position: "relative" }, isInitLayout: !0, isOriginLeft: !0, isOriginTop: !0, isResizeBound: !0, isResizingContainer: !0, transitionDuration: "1s", hiddenStyle: { opacity: 0, transform: "scale(0.005) rotateX(180deg)" }, visibleStyle: { opacity: 1, transform: "scale(1) rotateX(0deg)" } }, e(m.prototype, f.prototype), m.prototype.option = function (t) { e(this.options, t) }, m.prototype._create = function () { this.reloadItems(), this.stamps = [], this.stamp(this.options.stamp), e(this.element.style, this.options.containerStyle), this.options.isResizeBound && this.bindResize() }, m.prototype.reloadItems = function () { this.items = this._itemize(this.element.children) }, m.prototype._itemize = function (t) { for (var e = this._filterFindItemElements(t), i = this.constructor.Item, o = [], n = 0, r = e.length; r > n; n++) { var s = e[n], a = new i(s, this); o.push(a) } return o }, m.prototype._filterFindItemElements = function (t) { t = o(t); for (var e = this.options.itemSelector, i = [], n = 0, r = t.length; r > n; n++) { var s = t[n]; if (d(s)) if (e) { c(s, e) && i.push(s); for (var a = s.querySelectorAll(e), u = 0, p = a.length; p > u; u++)i.push(a[u]) } else i.push(s) } return i }, m.prototype.getItemElements = function () { for (var t = [], e = 0, i = this.items.length; i > e; e++)t.push(this.items[e].element); return t }, m.prototype.layout = function () { this._resetLayout(), this._manageStamps(); var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited; this.layoutItems(this.items, t), this._isLayoutInited = !0 }, m.prototype._init = m.prototype.layout, m.prototype._resetLayout = function () { this.getSize() }, m.prototype.getSize = function () { this.size = l(this.element) }, m.prototype._getMeasurement = function (t, e) { var i, o = this.options[t]; o ? ("string" == typeof o ? i = this.element.querySelector(o) : d(o) && (i = o), this[t] = i ? l(i)[e] : o) : this[t] = 0 }, m.prototype.layoutItems = function (t, e) { t = this._getItemsForLayout(t), this._layoutItems(t, e), this._postLayout() }, m.prototype._getItemsForLayout = function (t) { for (var e = [], i = 0, o = t.length; o > i; i++) { var n = t[i]; n.isIgnored || e.push(n) } return e }, m.prototype._layoutItems = function (t, e) { function i() { o.emitEvent("layoutComplete", [o, t]) } var o = this; if (!t || !t.length) return i(), void 0; this._itemsOn(t, "layout", i); for (var n = [], r = 0, s = t.length; s > r; r++) { var a = t[r], u = this._getItemLayoutPosition(a); u.item = a, u.isInstant = e || a.isLayoutInstant, n.push(u) } this._processLayoutQueue(n) }, m.prototype._getItemLayoutPosition = function () { return { x: 0, y: 0 } }, m.prototype._processLayoutQueue = function (t) { for (var e = 0, i = t.length; i > e; e++) { var o = t[e]; this._positionItem(o.item, o.x, o.y, o.isInstant) } }, m.prototype._positionItem = function (t, e, i, o) { o ? t.goTo(e, i) : t.moveTo(e, i) }, m.prototype._postLayout = function () { this.resizeContainer() }, m.prototype.resizeContainer = function () { if (this.options.isResizingContainer) { var t = this._getContainerSize(); t && (this._setContainerMeasure(t.width, !0), this._setContainerMeasure(t.height, !1)) } }, m.prototype._getContainerSize = h, m.prototype._setContainerMeasure = function (t, e) { if (void 0 !== t) { var i = this.size; i.isBorderBox && (t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth), t = Math.max(t, 0), this.element.style[e ? "width" : "height"] = t + "px" } }, m.prototype._itemsOn = function (t, e, i) { function o() { return n++, n === r && i.call(s), !0 } for (var n = 0, r = t.length, s = this, a = 0, u = t.length; u > a; a++) { var p = t[a]; p.on(e, o) } }, m.prototype.ignore = function (t) { var e = this.getItem(t); e && (e.isIgnored = !0) }, m.prototype.unignore = function (t) { var e = this.getItem(t); e && delete e.isIgnored }, m.prototype.stamp = function (t) { if (t = this._find(t)) { this.stamps = this.stamps.concat(t); for (var e = 0, i = t.length; i > e; e++) { var o = t[e]; this.ignore(o) } } }, m.prototype.unstamp = function (t) { if (t = this._find(t)) for (var e = 0, i = t.length; i > e; e++) { var o = t[e]; n(o, this.stamps), this.unignore(o) } }, m.prototype._find = function (t) { return t ? ("string" == typeof t && (t = this.element.querySelectorAll(t)), t = o(t)) : void 0 }, m.prototype._manageStamps = function () { if (this.stamps && this.stamps.length) { this._getBoundingRect(); for (var t = 0, e = this.stamps.length; e > t; t++) { var i = this.stamps[t]; this._manageStamp(i) } } }, m.prototype._getBoundingRect = function () { var t = this.element.getBoundingClientRect(), e = this.size; this._boundingRect = { left: t.left + e.paddingLeft + e.borderLeftWidth, top: t.top + e.paddingTop + e.borderTopWidth, right: t.right - (e.paddingRight + e.borderRightWidth), bottom: t.bottom - (e.paddingBottom + e.borderBottomWidth) } }, m.prototype._manageStamp = h, m.prototype._getElementOffset = function (t) { var e = t.getBoundingClientRect(), i = this._boundingRect, o = l(t), n = { left: e.left - i.left - o.marginLeft, top: e.top - i.top - o.marginTop, right: i.right - e.right - o.marginRight, bottom: i.bottom - e.bottom - o.marginBottom }; return n }, m.prototype.handleEvent = function (t) { var e = "on" + t.type; this[e] && this[e](t) }, m.prototype.bindResize = function () { this.isResizeBound || (i.bind(t, "resize", this), this.isResizeBound = !0) }, m.prototype.unbindResize = function () { this.isResizeBound && i.unbind(t, "resize", this), this.isResizeBound = !1 }, m.prototype.onresize = function () { function t() { e.resize(), delete e.resizeTimeout } this.resizeTimeout && clearTimeout(this.resizeTimeout); var e = this; this.resizeTimeout = setTimeout(t, 100) }, m.prototype.resize = function () { this.isResizeBound && this.needsResizeLayout() && this.layout() }, m.prototype.needsResizeLayout = function () { var t = l(this.element), e = this.size && t; return e && t.innerWidth !== this.size.innerWidth }, m.prototype.addItems = function (t) { var e = this._itemize(t); return e.length && (this.items = this.items.concat(e)), e }, m.prototype.appended = function (t) { var e = this.addItems(t); e.length && (this.layoutItems(e, !0), this.reveal(e)) }, m.prototype.prepended = function (t) { var e = this._itemize(t); if (e.length) { var i = this.items.slice(0); this.items = e.concat(i), this._resetLayout(), this._manageStamps(), this.layoutItems(e, !0), this.reveal(e), this.layoutItems(i) } }, m.prototype.reveal = function (t) { var e = t && t.length; if (e) for (var i = 0; e > i; i++) { var o = t[i]; o.reveal() } }, m.prototype.hide = function (t) { var e = t && t.length; if (e) for (var i = 0; e > i; i++) { var o = t[i]; o.hide() } }, m.prototype.getItem = function (t) { for (var e = 0, i = this.items.length; i > e; e++) { var o = this.items[e]; if (o.element === t) return o } }, m.prototype.getItems = function (t) { if (t && t.length) { for (var e = [], i = 0, o = t.length; o > i; i++) { var n = t[i], r = this.getItem(n); r && e.push(r) } return e } }, m.prototype.remove = function (t) { t = o(t); var e = this.getItems(t); if (e && e.length) { this._itemsOn(e, "remove", function () { this.emitEvent("removeComplete", [this, e]) }); for (var i = 0, r = e.length; r > i; i++) { var s = e[i]; s.remove(), n(s, this.items) } } }, m.prototype.destroy = function () { var t = this.element.style; t.height = "", t.position = "", t.width = ""; for (var e = 0, i = this.items.length; i > e; e++) { var o = this.items[e]; o.destroy() } this.unbindResize(); var n = this.element.outlayerGUID; delete v[n], delete this.element.outlayerGUID, p && p.removeData(this.element, this.constructor.namespace) }, m.data = function (t) { var e = t && t.outlayerGUID; return e && v[e] }, m.create = function (t, i) { function o() { m.apply(this, arguments) } return Object.create ? o.prototype = Object.create(m.prototype) : e(o.prototype, m.prototype), o.prototype.constructor = o, o.defaults = e({}, m.defaults), e(o.defaults, i), o.prototype.settings = {}, o.namespace = t, o.data = m.data, o.Item = function () { y.apply(this, arguments) }, o.Item.prototype = new y, s(function () { for (var e = r(t), i = a.querySelectorAll(".js-" + e), n = "data-" + e + "-options", s = 0, h = i.length; h > s; s++) { var f, d = i[s], l = d.getAttribute(n); try { f = l && JSON.parse(l) } catch (c) { u && u.error("Error parsing " + n + " on " + d.nodeName.toLowerCase() + (d.id ? "#" + d.id : "") + ": " + c); continue } var y = new o(d, f); p && p.data(d, t, y) } }), p && p.bridget && p.bridget(t, o), o }, m.Item = y, m } var a = t.document, u = t.console, p = t.jQuery, h = function () { }, f = Object.prototype.toString, d = "function" == typeof HTMLElement || "object" == typeof HTMLElement ? function (t) { return t instanceof HTMLElement } : function (t) { return t && "object" == typeof t && 1 === t.nodeType && "string" == typeof t.nodeName }, l = Array.prototype.indexOf ? function (t, e) { return t.indexOf(e) } : function (t, e) { for (var i = 0, o = t.length; o > i; i++)if (t[i] === e) return i; return -1 }; "function" == typeof define && define.amd ? define("outlayer/outlayer", ["eventie/eventie", "doc-ready/doc-ready", "eventEmitter/EventEmitter", "get-size/get-size", "matches-selector/matches-selector", "./item"], s) : "object" == typeof exports ? module.exports = s(require("eventie"), require("doc-ready"), require("wolfy87-eventemitter"), require("get-size"), require("desandro-matches-selector"), require("./item")) : t.Outlayer = s(t.eventie, t.docReady, t.EventEmitter, t.getSize, t.matchesSelector, t.Outlayer.Item) }(window), function (t) { function e(t) { function e() { t.Item.apply(this, arguments) } e.prototype = new t.Item, e.prototype._create = function () { this.id = this.layout.itemGUID++, t.Item.prototype._create.call(this), this.sortData = {} }, e.prototype.updateSortData = function () { if (!this.isIgnored) { this.sortData.id = this.id, this.sortData["original-order"] = this.id, this.sortData.random = Math.random(); var t = this.layout.options.getSortData, e = this.layout._sorters; for (var i in t) { var o = e[i]; this.sortData[i] = o(this.element, this) } } }; var i = e.prototype.destroy; return e.prototype.destroy = function () { i.apply(this, arguments), this.css({ display: "" }) }, e } "function" == typeof define && define.amd ? define("isotope/js/item", ["outlayer/outlayer"], e) : "object" == typeof exports ? module.exports = e(require("outlayer")) : (t.Isotope = t.Isotope || {}, t.Isotope.Item = e(t.Outlayer)) }(window), function (t) { function e(t, e) { function i(t) { this.isotope = t, t && (this.options = t.options[this.namespace], this.element = t.element, this.items = t.filteredItems, this.size = t.size) } return function () { function t(t) { return function () { return e.prototype[t].apply(this.isotope, arguments) } } for (var o = ["_resetLayout", "_getItemLayoutPosition", "_manageStamp", "_getContainerSize", "_getElementOffset", "needsResizeLayout"], n = 0, r = o.length; r > n; n++) { var s = o[n]; i.prototype[s] = t(s) } }(), i.prototype.needsVerticalResizeLayout = function () { var e = t(this.isotope.element), i = this.isotope.size && e; return i && e.innerHeight !== this.isotope.size.innerHeight }, i.prototype._getMeasurement = function () { this.isotope._getMeasurement.apply(this, arguments) }, i.prototype.getColumnWidth = function () { this.getSegmentSize("column", "Width") }, i.prototype.getRowHeight = function () { this.getSegmentSize("row", "Height") }, i.prototype.getSegmentSize = function (t, e) { var i = t + e, o = "outer" + e; if (this._getMeasurement(i, o), !this[i]) { var n = this.getFirstItemSize(); this[i] = n && n[o] || this.isotope.size["inner" + e] } }, i.prototype.getFirstItemSize = function () { var e = this.isotope.filteredItems[0]; return e && e.element && t(e.element) }, i.prototype.layout = function () { this.isotope.layout.apply(this.isotope, arguments) }, i.prototype.getSize = function () { this.isotope.getSize(), this.size = this.isotope.size }, i.modes = {}, i.create = function (t, e) { function o() { i.apply(this, arguments) } return o.prototype = new i, e && (o.options = e), o.prototype.namespace = t, i.modes[t] = o, o }, i } "function" == typeof define && define.amd ? define("isotope/js/layout-mode", ["get-size/get-size", "outlayer/outlayer"], e) : "object" == typeof exports ? module.exports = e(require("get-size"), require("outlayer")) : (t.Isotope = t.Isotope || {}, t.Isotope.LayoutMode = e(t.getSize, t.Outlayer)) }(window), function (t) { function e(t, e) { var o = t.create("masonry"); return o.prototype._resetLayout = function () { this.getSize(), this._getMeasurement("columnWidth", "outerWidth"), this._getMeasurement("gutter", "outerWidth"), this.measureColumns(); var t = this.cols; for (this.colYs = []; t--;)this.colYs.push(0); this.maxY = 0 }, o.prototype.measureColumns = function () { if (this.getContainerWidth(), !this.columnWidth) { var t = this.items[0], i = t && t.element; this.columnWidth = i && e(i).outerWidth || this.containerWidth } this.columnWidth += this.gutter, this.cols = Math.floor((this.containerWidth + this.gutter) / this.columnWidth), this.cols = Math.max(this.cols, 1) }, o.prototype.getContainerWidth = function () { var t = this.options.isFitWidth ? this.element.parentNode : this.element, i = e(t); this.containerWidth = i && i.innerWidth }, o.prototype._getItemLayoutPosition = function (t) { t.getSize(); var e = t.size.outerWidth % this.columnWidth, o = e && 1 > e ? "round" : "ceil", n = Math[o](t.size.outerWidth / this.columnWidth); n = Math.min(n, this.cols); for (var r = this._getColGroup(n), s = Math.min.apply(Math, r), a = i(r, s), u = { x: this.columnWidth * a, y: s }, p = s + t.size.outerHeight, h = this.cols + 1 - r.length, f = 0; h > f; f++)this.colYs[a + f] = p; return u }, o.prototype._getColGroup = function (t) { if (2 > t) return this.colYs; for (var e = [], i = this.cols + 1 - t, o = 0; i > o; o++) { var n = this.colYs.slice(o, o + t); e[o] = Math.max.apply(Math, n) } return e }, o.prototype._manageStamp = function (t) { var i = e(t), o = this._getElementOffset(t), n = this.options.isOriginLeft ? o.left : o.right, r = n + i.outerWidth, s = Math.floor(n / this.columnWidth); s = Math.max(0, s); var a = Math.floor(r / this.columnWidth); a -= r % this.columnWidth ? 0 : 1, a = Math.min(this.cols - 1, a); for (var u = (this.options.isOriginTop ? o.top : o.bottom) + i.outerHeight, p = s; a >= p; p++)this.colYs[p] = Math.max(u, this.colYs[p]) }, o.prototype._getContainerSize = function () { this.maxY = Math.max.apply(Math, this.colYs); var t = { height: this.maxY }; return this.options.isFitWidth && (t.width = this._getContainerFitWidth()), t }, o.prototype._getContainerFitWidth = function () { for (var t = 0, e = this.cols; --e && 0 === this.colYs[e];)t++; return (this.cols - t) * this.columnWidth - this.gutter }, o.prototype.needsResizeLayout = function () { var t = this.containerWidth; return this.getContainerWidth(), t !== this.containerWidth }, o } var i = Array.prototype.indexOf ? function (t, e) { return t.indexOf(e) } : function (t, e) { for (var i = 0, o = t.length; o > i; i++) { var n = t[i]; if (n === e) return i } return -1 }; "function" == typeof define && define.amd ? define("masonry/masonry", ["outlayer/outlayer", "get-size/get-size"], e) : "object" == typeof exports ? module.exports = e(require("outlayer"), require("get-size")) : t.Masonry = e(t.Outlayer, t.getSize) }(window), function (t) { function e(t, e) { for (var i in e) t[i] = e[i]; return t } function i(t, i) { var o = t.create("masonry"), n = o.prototype._getElementOffset, r = o.prototype.layout, s = o.prototype._getMeasurement; e(o.prototype, i.prototype), o.prototype._getElementOffset = n, o.prototype.layout = r, o.prototype._getMeasurement = s; var a = o.prototype.measureColumns; o.prototype.measureColumns = function () { this.items = this.isotope.filteredItems, a.call(this) }; var u = o.prototype._manageStamp; return o.prototype._manageStamp = function () { this.options.isOriginLeft = this.isotope.options.isOriginLeft, this.options.isOriginTop = this.isotope.options.isOriginTop, u.apply(this, arguments) }, o } "function" == typeof define && define.amd ? define("isotope/js/layout-modes/masonry", ["../layout-mode", "masonry/masonry"], i) : "object" == typeof exports ? module.exports = i(require("../layout-mode"), require("masonry-layout")) : i(t.Isotope.LayoutMode, t.Masonry) }(window), function (t) { function e(t) { var e = t.create("fitRows"); return e.prototype._resetLayout = function () { this.x = 0, this.y = 0, this.maxY = 0, this._getMeasurement("gutter", "outerWidth") }, e.prototype._getItemLayoutPosition = function (t) { t.getSize(); var e = t.size.outerWidth + this.gutter, i = this.isotope.size.innerWidth + this.gutter; 0 !== this.x && e + this.x > i && (this.x = 0, this.y = this.maxY); var o = { x: this.x, y: this.y }; return this.maxY = Math.max(this.maxY, this.y + t.size.outerHeight), this.x += e, o }, e.prototype._getContainerSize = function () { return { height: this.maxY } }, e } "function" == typeof define && define.amd ? define("isotope/js/layout-modes/fit-rows", ["../layout-mode"], e) : "object" == typeof exports ? module.exports = e(require("../layout-mode")) : e(t.Isotope.LayoutMode) }(window), function (t) { function e(t) { var e = t.create("vertical", { horizontalAlignment: 0 }); return e.prototype._resetLayout = function () { this.y = 0 }, e.prototype._getItemLayoutPosition = function (t) { t.getSize(); var e = (this.isotope.size.innerWidth - t.size.outerWidth) * this.options.horizontalAlignment, i = this.y; return this.y += t.size.outerHeight, { x: e, y: i } }, e.prototype._getContainerSize = function () { return { height: this.y } }, e } "function" == typeof define && define.amd ? define("isotope/js/layout-modes/vertical", ["../layout-mode"], e) : "object" == typeof exports ? module.exports = e(require("../layout-mode")) : e(t.Isotope.LayoutMode) }(window), function (t) { function e(t, e) { for (var i in e) t[i] = e[i]; return t } function i(t) { return "[object Array]" === h.call(t) } function o(t) { var e = []; if (i(t)) e = t; else if (t && "number" == typeof t.length) for (var o = 0, n = t.length; n > o; o++)e.push(t[o]); else e.push(t); return e } function n(t, e) { var i = f(e, t); -1 !== i && e.splice(i, 1) } function r(t, i, r, u, h) { function f(t, e) { return function (i, o) { for (var n = 0, r = t.length; r > n; n++) { var s = t[n], a = i.sortData[s], u = o.sortData[s]; if (a > u || u > a) { var p = void 0 !== e[s] ? e[s] : e, h = p ? 1 : -1; return (a > u ? 1 : -1) * h } } return 0 } } var d = t.create("isotope", { layoutMode: "masonry", isJQueryFiltering: !0, sortAscending: !0 }); d.Item = u, d.LayoutMode = h, d.prototype._create = function () { this.itemGUID = 0, this._sorters = {}, this._getSorters(), t.prototype._create.call(this), this.modes = {}, this.filteredItems = this.items, this.sortHistory = ["original-order"]; for (var e in h.modes) this._initLayoutMode(e) }, d.prototype.reloadItems = function () { this.itemGUID = 0, t.prototype.reloadItems.call(this) }, d.prototype._itemize = function () { for (var e = t.prototype._itemize.apply(this, arguments), i = 0, o = e.length; o > i; i++) { var n = e[i]; n.id = this.itemGUID++ } return this._updateItemsSortData(e), e }, d.prototype._initLayoutMode = function (t) { var i = h.modes[t], o = this.options[t] || {}; this.options[t] = i.options ? e(i.options, o) : o, this.modes[t] = new i(this) }, d.prototype.layout = function () { return !this._isLayoutInited && this.options.isInitLayout ? (this.arrange(), void 0) : (this._layout(), void 0) }, d.prototype._layout = function () { var t = this._getIsInstant(); this._resetLayout(), this._manageStamps(), this.layoutItems(this.filteredItems, t), this._isLayoutInited = !0 }, d.prototype.arrange = function (t) { function e() { o.reveal(i.needReveal), o.hide(i.needHide) } this.option(t), this._getIsInstant(); var i = this._filter(this.items); this.filteredItems = i.matches; var o = this; this._isInstant ? this._noTransition(e) : e(), this._sort(), this._layout() }, d.prototype._init = d.prototype.arrange, d.prototype._getIsInstant = function () { var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited; return this._isInstant = t, t }, d.prototype._filter = function (t) { var e = this.options.filter; e = e || "*"; for (var i = [], o = [], n = [], r = this._getFilterTest(e), s = 0, a = t.length; a > s; s++) { var u = t[s]; if (!u.isIgnored) { var p = r(u); p && i.push(u), p && u.isHidden ? o.push(u) : p || u.isHidden || n.push(u) } } return { matches: i, needReveal: o, needHide: n } }, d.prototype._getFilterTest = function (t) { return s && this.options.isJQueryFiltering ? function (e) { return s(e.element).is(t) } : "function" == typeof t ? function (e) { return t(e.element) } : function (e) { return r(e.element, t) } }, d.prototype.updateSortData = function (t) { var e; t ? (t = o(t), e = this.getItems(t)) : e = this.items, this._getSorters(), this._updateItemsSortData(e) }, d.prototype._getSorters = function () { var t = this.options.getSortData; for (var e in t) { var i = t[e]; this._sorters[e] = l(i) } }, d.prototype._updateItemsSortData = function (t) { for (var e = t && t.length, i = 0; e && e > i; i++) { var o = t[i]; o.updateSortData() } }; var l = function () { function t(t) { if ("string" != typeof t) return t; var i = a(t).split(" "), o = i[0], n = o.match(/^\[(.+)\]$/), r = n && n[1], s = e(r, o), u = d.sortDataParsers[i[1]]; return t = u ? function (t) { return t && u(s(t)) } : function (t) { return t && s(t) } } function e(t, e) { var i; return i = t ? function (e) { return e.getAttribute(t) } : function (t) { var i = t.querySelector(e); return i && p(i) } } return t }(); d.sortDataParsers = { parseInt: function (t) { return parseInt(t, 10) }, parseFloat: function (t) { return parseFloat(t) } }, d.prototype._sort = function () { var t = this.options.sortBy; if (t) { var e = [].concat.apply(t, this.sortHistory), i = f(e, this.options.sortAscending); this.filteredItems.sort(i), t !== this.sortHistory[0] && this.sortHistory.unshift(t) } }, d.prototype._mode = function () { var t = this.options.layoutMode, e = this.modes[t]; if (!e) throw Error("No layout mode: " + t); return e.options = this.options[t], e }, d.prototype._resetLayout = function () { t.prototype._resetLayout.call(this), this._mode()._resetLayout() }, d.prototype._getItemLayoutPosition = function (t) { return this._mode()._getItemLayoutPosition(t) }, d.prototype._manageStamp = function (t) { this._mode()._manageStamp(t) }, d.prototype._getContainerSize = function () { return this._mode()._getContainerSize() }, d.prototype.needsResizeLayout = function () { return this._mode().needsResizeLayout() }, d.prototype.appended = function (t) { var e = this.addItems(t); if (e.length) { var i = this._filterRevealAdded(e); this.filteredItems = this.filteredItems.concat(i) } }, d.prototype.prepended = function (t) { var e = this._itemize(t); if (e.length) { this._resetLayout(), this._manageStamps(); var i = this._filterRevealAdded(e); this.layoutItems(this.filteredItems), this.filteredItems = i.concat(this.filteredItems), this.items = e.concat(this.items) } }, d.prototype._filterRevealAdded = function (t) { var e = this._filter(t); return this.hide(e.needHide), this.reveal(e.matches), this.layoutItems(e.matches, !0), e.matches }, d.prototype.insert = function (t) { var e = this.addItems(t); if (e.length) { var i, o, n = e.length; for (i = 0; n > i; i++)o = e[i], this.element.appendChild(o.element); var r = this._filter(e).matches; for (i = 0; n > i; i++)e[i].isLayoutInstant = !0; for (this.arrange(), i = 0; n > i; i++)delete e[i].isLayoutInstant; this.reveal(r) } }; var c = d.prototype.remove; return d.prototype.remove = function (t) { t = o(t); var e = this.getItems(t); if (c.call(this, t), e && e.length) for (var i = 0, r = e.length; r > i; i++) { var s = e[i]; n(s, this.filteredItems) } }, d.prototype.shuffle = function () { for (var t = 0, e = this.items.length; e > t; t++) { var i = this.items[t]; i.sortData.random = Math.random() } this.options.sortBy = "random", this._sort(), this._layout() }, d.prototype._noTransition = function (t) { var e = this.options.transitionDuration; this.options.transitionDuration = 0; var i = t.call(this); return this.options.transitionDuration = e, i }, d.prototype.getFilteredItemElements = function () { for (var t = [], e = 0, i = this.filteredItems.length; i > e; e++)t.push(this.filteredItems[e].element); return t }, d } var s = t.jQuery, a = String.prototype.trim ? function (t) { return t.trim() } : function (t) { return t.replace(/^\s+|\s+$/g, "") }, u = document.documentElement, p = u.textContent ? function (t) { return t.textContent } : function (t) { return t.innerText }, h = Object.prototype.toString, f = Array.prototype.indexOf ? function (t, e) { return t.indexOf(e) } : function (t, e) { for (var i = 0, o = t.length; o > i; i++)if (t[i] === e) return i; return -1 }; "function" == typeof define && define.amd ? define(["outlayer/outlayer", "get-size/get-size", "matches-selector/matches-selector", "isotope/js/item", "isotope/js/layout-mode", "isotope/js/layout-modes/masonry", "isotope/js/layout-modes/fit-rows", "isotope/js/layout-modes/vertical"], r) : "object" == typeof exports ? module.exports = r(require("outlayer"), require("get-size"), require("desandro-matches-selector"), require("./item"), require("./layout-mode"), require("./layout-modes/masonry"), require("./layout-modes/fit-rows"), require("./layout-modes/vertical")) : t.Isotope = r(t.Outlayer, t.getSize, t.matchesSelector, t.Isotope.Item, t.Isotope.LayoutMode) }(window);; (function ($) {
    var defaults = { mode: 'horizontal', slideSelector: '', infiniteLoop: true, hideControlOnEnd: false, speed: 500, easing: null, slideMargin: 0, startSlide: 0, randomStart: false, captions: false, ticker: false, tickerHover: false, adaptiveHeight: false, adaptiveHeightSpeed: 500, video: false, useCSS: true, preloadImages: 'visible', responsive: true, slideZIndex: 50, wrapperClass: 'bx-wrapper', touchEnabled: true, swipeThreshold: 50, oneToOneTouch: true, preventDefaultSwipeX: true, preventDefaultSwipeY: false, ariaLive: true, ariaHidden: true, keyboardEnabled: false, pager: true, pagerType: 'full', pagerShortSeparator: ' / ', pagerSelector: null, buildPager: null, pagerCustom: null, controls: true, nextText: 'Next', prevText: 'Prev', nextSelector: null, prevSelector: null, autoControls: false, startText: 'Start', stopText: 'Stop', autoControlsCombine: false, autoControlsSelector: null, auto: false, pause: 4000, autoStart: true, autoDirection: 'next', stopAutoOnClick: false, autoHover: false, autoDelay: 0, autoSlideForOnePage: false, minSlides: 1, maxSlides: 1, moveSlides: 0, slideWidth: 0, shrinkItems: false, onSliderLoad: function () { return true; }, onSlideBefore: function () { return true; }, onSlideAfter: function () { return true; }, onSlideNext: function () { return true; }, onSlidePrev: function () { return true; }, onSliderResize: function () { return true; }, onAutoChange: function () { return true; } }; $.fn.bxSlider = function (options) {
        if (this.length === 0) { return this; }
        if (this.length > 1) { this.each(function () { $(this).bxSlider(options); }); return this; }
        var slider = {}, el = this, windowWidth = $(window).width(), windowHeight = $(window).height(); if ($(el).data('bxSlider')) { return; }
        var init = function () {
            if ($(el).data('bxSlider')) { return; }
            slider.settings = $.extend({}, defaults, options); slider.settings.slideWidth = parseInt(slider.settings.slideWidth); slider.children = el.children(slider.settings.slideSelector); if (slider.children.length < slider.settings.minSlides) { slider.settings.minSlides = slider.children.length; }
            if (slider.children.length < slider.settings.maxSlides) { slider.settings.maxSlides = slider.children.length; }
            if (slider.settings.randomStart) { slider.settings.startSlide = Math.floor(Math.random() * slider.children.length); }
            slider.active = { index: slider.settings.startSlide }; slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1; if (slider.carousel) { slider.settings.preloadImages = 'all'; }
            slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin); slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin); slider.working = false; slider.controls = {}; slider.interval = null; slider.animProp = slider.settings.mode === 'vertical' ? 'top' : 'left'; slider.usingCSS = slider.settings.useCSS && slider.settings.mode !== 'fade' && (function () {
                var div = document.createElement('div'), props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']; for (var i = 0; i < props.length; i++) { if (div.style[props[i]] !== undefined) { slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase(); slider.animProp = '-' + slider.cssPrefix + '-transform'; return true; } }
                return false;
            }()); if (slider.settings.mode === 'vertical') { slider.settings.maxSlides = slider.settings.minSlides; }
            el.data('origStyle', el.attr('style')); el.children(slider.settings.slideSelector).each(function () { $(this).data('origStyle', $(this).attr('style')); }); setup();
        }; var setup = function () {
            var preloadSelector = slider.children.eq(slider.settings.startSlide); el.wrap('<div class="' + slider.settings.wrapperClass + '"><div class="bx-viewport"></div></div>'); slider.viewport = el.parent(); if (slider.settings.ariaLive && !slider.settings.ticker) { slider.viewport.attr('aria-live', 'polite'); }
            slider.loader = $('<div class="bx-loading" />'); slider.viewport.prepend(slider.loader); el.css({ width: slider.settings.mode === 'horizontal' ? (slider.children.length * 1000 + 215) + '%' : 'auto', position: 'relative' }); if (slider.usingCSS && slider.settings.easing) { el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing); } else if (!slider.settings.easing) { slider.settings.easing = 'swing'; }
            slider.viewport.css({ width: '100%', overflow: 'hidden', position: 'relative' }); slider.viewport.parent().css({ maxWidth: getViewportMaxWidth() }); slider.children.css({ 'float': slider.settings.mode === 'horizontal' ? 'left' : 'none', listStyle: 'none', position: 'relative' }); slider.children.css('width', getSlideWidth()); if (slider.settings.mode === 'horizontal' && slider.settings.slideMargin > 0) { slider.children.css('marginRight', slider.settings.slideMargin); }
            if (slider.settings.mode === 'vertical' && slider.settings.slideMargin > 0) { slider.children.css('marginBottom', slider.settings.slideMargin); }
            if (slider.settings.mode === 'fade') { slider.children.css({ position: 'absolute', zIndex: 0, display: 'none' }); slider.children.eq(slider.settings.startSlide).css({ zIndex: slider.settings.slideZIndex, display: 'block' }); }
            slider.controls.el = $('<div class="bx-controls" />'); if (slider.settings.captions) { appendCaptions(); }
            slider.active.last = slider.settings.startSlide === getPagerQty() - 1; if (slider.settings.video) { el.fitVids(); }
            if (slider.settings.preloadImages === 'none') { preloadSelector = null; }
            else if (slider.settings.preloadImages === 'all' || slider.settings.ticker) { preloadSelector = slider.children; }
            if (!slider.settings.ticker) {
                if (slider.settings.controls) { appendControls(); }
                if (slider.settings.auto && slider.settings.autoControls) { appendControlsAuto(); }
                if (slider.settings.pager) { appendPager(); }
                if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) { slider.viewport.after(slider.controls.el); }
            } else { slider.settings.pager = false; }
            if (preloadSelector === null) { start(); } else { loadElements(preloadSelector, start); }
        }; var loadElements = function (selector, callback) {
            var total = selector.find('img:not([src=""]), iframe').length, count = 0; if (total === 0) { callback(); return; }
            selector.find('img:not([src=""]), iframe').each(function () { $(this).one('load error', function () { if (++count === total) { callback(); } }).each(function () { if (this.complete || this.src == '') { $(this).trigger('load'); } }); });
        }; var start = function () {
            if (slider.settings.infiniteLoop && slider.settings.mode !== 'fade' && !slider.settings.ticker) {
                var slice = slider.settings.mode === 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides, sliceAppend = slider.children.slice(0, slice).clone(true).addClass('bx-clone'), slicePrepend = slider.children.slice(-slice).clone(true).addClass('bx-clone'); if (slider.settings.ariaHidden) { sliceAppend.attr('aria-hidden', true); slicePrepend.attr('aria-hidden', true); }
                el.append(sliceAppend).prepend(slicePrepend);
            }
            slider.loader.remove(); setSlidePosition(); if (slider.settings.mode === 'vertical') { slider.settings.adaptiveHeight = true; }
            slider.viewport.height(getViewportHeight()); el.redrawSlider(); slider.settings.onSliderLoad.call(el, slider.active.index); slider.initialized = true; if (slider.settings.responsive) { $(window).on('resize', resizeWindow); }
            if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) { initAuto(); }
            if (slider.settings.ticker) { initTicker(); }
            if (slider.settings.pager) { updatePagerActive(slider.settings.startSlide); }
            if (slider.settings.controls) { updateDirectionControls(); }
            if (slider.settings.touchEnabled && !slider.settings.ticker) { initTouch(); }
            if (slider.settings.keyboardEnabled && !slider.settings.ticker) { $(document).keydown(keyPress); }
        }; var getViewportHeight = function () {
            var height = 0; var children = $(); if (slider.settings.mode !== 'vertical' && !slider.settings.adaptiveHeight) { children = slider.children; } else { if (!slider.carousel) { children = slider.children.eq(slider.active.index); } else { var currentIndex = slider.settings.moveSlides === 1 ? slider.active.index : slider.active.index * getMoveBy(); children = slider.children.eq(currentIndex); for (i = 1; i <= slider.settings.maxSlides - 1; i++) { if (currentIndex + i >= slider.children.length) { children = children.add(slider.children.eq(i - 1)); } else { children = children.add(slider.children.eq(currentIndex + i)); } } } }
            if (slider.settings.mode === 'vertical') { children.each(function (index) { height += $(this).outerHeight(); }); if (slider.settings.slideMargin > 0) { height += slider.settings.slideMargin * (slider.settings.minSlides - 1); } } else { height = Math.max.apply(Math, children.map(function () { return $(this).outerHeight(false); }).get()); }
            if (slider.viewport.css('box-sizing') === 'border-box') {
                height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) +
                parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));
            } else if (slider.viewport.css('box-sizing') === 'padding-box') { height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')); }
            return height;
        }; var getViewportMaxWidth = function () {
            var width = '100%'; if (slider.settings.slideWidth > 0) { if (slider.settings.mode === 'horizontal') { width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin); } else { width = slider.settings.slideWidth; } }
            return width;
        }; var getSlideWidth = function () {
            var newElWidth = slider.settings.slideWidth, wrapWidth = slider.viewport.width(); if (slider.settings.slideWidth === 0 || (slider.settings.slideWidth > wrapWidth && !slider.carousel) || slider.settings.mode === 'vertical') { newElWidth = wrapWidth; } else if (slider.settings.maxSlides > 1 && slider.settings.mode === 'horizontal') { if (wrapWidth > slider.maxThreshold) { return newElWidth; } else if (wrapWidth < slider.minThreshold) { newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides; } else if (slider.settings.shrinkItems) { newElWidth = Math.floor((wrapWidth + slider.settings.slideMargin) / (Math.ceil((wrapWidth + slider.settings.slideMargin) / (newElWidth + slider.settings.slideMargin))) - slider.settings.slideMargin); } }
            return newElWidth;
        }; var getNumberSlidesShowing = function () {
            var slidesShowing = 1, childWidth = null; if (slider.settings.mode === 'horizontal' && slider.settings.slideWidth > 0) {
                if (slider.viewport.width() < slider.minThreshold) { slidesShowing = slider.settings.minSlides; } else if (slider.viewport.width() > slider.maxThreshold) { slidesShowing = slider.settings.maxSlides; } else {
                    childWidth = slider.children.first().width() + slider.settings.slideMargin; slidesShowing = Math.floor((slider.viewport.width() +
                        slider.settings.slideMargin) / childWidth) || 1;
                }
            } else if (slider.settings.mode === 'vertical') { slidesShowing = slider.settings.minSlides; }
            return slidesShowing;
        }; var getPagerQty = function () {
            var pagerQty = 0, breakPoint = 0, counter = 0; if (slider.settings.moveSlides > 0) {
                if (slider.settings.infiniteLoop) { pagerQty = Math.ceil(slider.children.length / getMoveBy()); } else {
                    while (breakPoint < slider.children.length) { ++pagerQty; breakPoint = counter + getNumberSlidesShowing(); counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing(); }
                    return counter;
                }
            } else { pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing()); }
            return pagerQty;
        }; var getMoveBy = function () {
            if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) { return slider.settings.moveSlides; }
            return getNumberSlidesShowing();
        }; var setSlidePosition = function () {
            var position, lastChild, lastShowingIndex; if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) { if (slider.settings.mode === 'horizontal') { lastChild = slider.children.last(); position = lastChild.position(); setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0); } else if (slider.settings.mode === 'vertical') { lastShowingIndex = slider.children.length - slider.settings.minSlides; position = slider.children.eq(lastShowingIndex).position(); setPositionProperty(-position.top, 'reset', 0); } } else {
                position = slider.children.eq(slider.active.index * getMoveBy()).position(); if (slider.active.index === getPagerQty() - 1) { slider.active.last = true; }
                if (position !== undefined) {
                    if (slider.settings.mode === 'horizontal') { setPositionProperty(-position.left, 'reset', 0); }
                    else if (slider.settings.mode === 'vertical') { setPositionProperty(-position.top, 'reset', 0); }
                }
            }
        }; var setPositionProperty = function (value, type, duration, params) {
            var animateObj, propValue; if (slider.usingCSS) {
                propValue = slider.settings.mode === 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)'; el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's'); if (type === 'slide') {
                    el.css(slider.animProp, propValue); if (duration !== 0) {
                        el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function (e) {
                            if (!$(e.target).is(el)) { return; }
                            el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'); updateAfterSlideTransition();
                        });
                    } else { updateAfterSlideTransition(); }
                } else if (type === 'reset') { el.css(slider.animProp, propValue); } else if (type === 'ticker') {
                    el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear'); el.css(slider.animProp, propValue); if (duration !== 0) {
                        el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function (e) {
                            if (!$(e.target).is(el)) { return; }
                            el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'); setPositionProperty(params.resetValue, 'reset', 0); tickerLoop();
                        });
                    } else { setPositionProperty(params.resetValue, 'reset', 0); tickerLoop(); }
                }
            } else { animateObj = {}; animateObj[slider.animProp] = value; if (type === 'slide') { el.animate(animateObj, duration, slider.settings.easing, function () { updateAfterSlideTransition(); }); } else if (type === 'reset') { el.css(slider.animProp, value); } else if (type === 'ticker') { el.animate(animateObj, duration, 'linear', function () { setPositionProperty(params.resetValue, 'reset', 0); tickerLoop(); }); } }
        }; var populatePager = function () {
            var pagerHtml = '', linkContent = '', pagerQty = getPagerQty(); for (var i = 0; i < pagerQty; i++) {
                linkContent = ''; if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager) || slider.settings.pagerCustom) { linkContent = slider.settings.buildPager(i); slider.pagerEl.addClass('bx-custom-pager'); } else { linkContent = i + 1; slider.pagerEl.addClass('bx-default-pager'); }
                pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
            }
            slider.pagerEl.html(pagerHtml);
        }; var appendPager = function () {
            if (!slider.settings.pagerCustom) {
                slider.pagerEl = $('<div class="bx-pager" />'); if (slider.settings.pagerSelector) { $(slider.settings.pagerSelector).html(slider.pagerEl); } else { slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl); }
                populatePager();
            } else { slider.pagerEl = $(slider.settings.pagerCustom); }
            slider.pagerEl.on('click touchend', 'a', clickPagerBind);
        }; var appendControls = function () {
            slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>'); slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>'); slider.controls.next.on('click touchend', clickNextBind); slider.controls.prev.on('click touchend', clickPrevBind); if (slider.settings.nextSelector) { $(slider.settings.nextSelector).append(slider.controls.next); }
            if (slider.settings.prevSelector) { $(slider.settings.prevSelector).append(slider.controls.prev); }
            if (!slider.settings.nextSelector && !slider.settings.prevSelector) { slider.controls.directionEl = $('<div class="bx-controls-direction" />'); slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next); slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl); }
        }; var appendControlsAuto = function () {
            slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>'); slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>'); slider.controls.autoEl = $('<div class="bx-controls-auto" />'); slider.controls.autoEl.on('click', '.bx-start', clickStartBind); slider.controls.autoEl.on('click', '.bx-stop', clickStopBind); if (slider.settings.autoControlsCombine) { slider.controls.autoEl.append(slider.controls.start); } else { slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop); }
            if (slider.settings.autoControlsSelector) { $(slider.settings.autoControlsSelector).html(slider.controls.autoEl); } else { slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl); }
            updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
        }; var appendCaptions = function () { slider.children.each(function (index) { var title = $(this).find('img:first').attr('title'); if (title !== undefined && ('' + title).length) { $(this).append('<div class="bx-caption"><span>' + title + '</span></div>'); } }); }; var clickNextBind = function (e) {
            e.preventDefault(); if (slider.controls.el.hasClass('disabled')) { return; }
            if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
            el.goToNextSlide();
        }; var clickPrevBind = function (e) {
            e.preventDefault(); if (slider.controls.el.hasClass('disabled')) { return; }
            if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
            el.goToPrevSlide();
        }; var clickStartBind = function (e) { el.startAuto(); e.preventDefault(); }; var clickStopBind = function (e) { el.stopAuto(); e.preventDefault(); }; var clickPagerBind = function (e) {
            var pagerLink, pagerIndex; e.preventDefault(); if (slider.controls.el.hasClass('disabled')) { return; }
            if (slider.settings.auto && slider.settings.stopAutoOnClick) { el.stopAuto(); }
            pagerLink = $(e.currentTarget); if (pagerLink.attr('data-slide-index') !== undefined) { pagerIndex = parseInt(pagerLink.attr('data-slide-index')); if (pagerIndex !== slider.active.index) { el.goToSlide(pagerIndex); } }
        }; var updatePagerActive = function (slideIndex) {
            var len = slider.children.length; if (slider.settings.pagerType === 'short') {
                if (slider.settings.maxSlides > 1) { len = Math.ceil(slider.children.length / slider.settings.maxSlides); }
                slider.pagerEl.html((slideIndex + 1) + slider.settings.pagerShortSeparator + len); return;
            }
            slider.pagerEl.find('a').removeClass('active'); slider.pagerEl.each(function (i, el) { $(el).find('a').eq(slideIndex).addClass('active'); });
        }; var updateAfterSlideTransition = function () {
            if (slider.settings.infiniteLoop) {
                var position = ''; if (slider.active.index === 0) { position = slider.children.eq(0).position(); } else if (slider.active.index === getPagerQty() - 1 && slider.carousel) { position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position(); } else if (slider.active.index === slider.children.length - 1) { position = slider.children.eq(slider.children.length - 1).position(); }
                if (position) {
                    if (slider.settings.mode === 'horizontal') { setPositionProperty(-position.left, 'reset', 0); }
                    else if (slider.settings.mode === 'vertical') { setPositionProperty(-position.top, 'reset', 0); }
                }
            }
            slider.working = false; slider.settings.onSlideAfter.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
        }; var updateAutoControls = function (state) { if (slider.settings.autoControlsCombine) { slider.controls.autoEl.html(slider.controls[state]); } else { slider.controls.autoEl.find('a').removeClass('active'); slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active'); } }; var updateDirectionControls = function () { if (getPagerQty() === 1) { slider.controls.prev.addClass('disabled'); slider.controls.next.addClass('disabled'); } else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) { if (slider.active.index === 0) { slider.controls.prev.addClass('disabled'); slider.controls.next.removeClass('disabled'); } else if (slider.active.index === getPagerQty() - 1) { slider.controls.next.addClass('disabled'); slider.controls.prev.removeClass('disabled'); } else { slider.controls.prev.removeClass('disabled'); slider.controls.next.removeClass('disabled'); } } }; var windowFocusHandler = function () { el.startAuto(); }; var windowBlurHandler = function () { el.stopAuto(); }; var initAuto = function () {
            if (slider.settings.autoDelay > 0) { setTimeout(el.startAuto, slider.settings.autoDelay); } else { el.startAuto(); $(window).focus(windowFocusHandler).blur(windowBlurHandler); }
            if (slider.settings.autoHover) { el.hover(function () { if (slider.interval) { el.stopAuto(true); slider.autoPaused = true; } }, function () { if (slider.autoPaused) { el.startAuto(true); slider.autoPaused = null; } }); }
        }; var initTicker = function () {
            var startPosition = 0, position, transform, value, idx, ratio, property, newSpeed, totalDimens; if (slider.settings.autoDirection === 'next') { el.append(slider.children.clone().addClass('bx-clone')); } else { el.prepend(slider.children.clone().addClass('bx-clone')); position = slider.children.first().position(); startPosition = slider.settings.mode === 'horizontal' ? -position.left : -position.top; }
            setPositionProperty(startPosition, 'reset', 0); slider.settings.pager = false; slider.settings.controls = false; slider.settings.autoControls = false; if (slider.settings.tickerHover) { if (slider.usingCSS) { idx = slider.settings.mode === 'horizontal' ? 4 : 5; slider.viewport.hover(function () { transform = el.css('-' + slider.cssPrefix + '-transform'); value = parseFloat(transform.split(',')[idx]); setPositionProperty(value, 'reset', 0); }, function () { totalDimens = 0; slider.children.each(function (index) { totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true); }); ratio = slider.settings.speed / totalDimens; property = slider.settings.mode === 'horizontal' ? 'left' : 'top'; newSpeed = ratio * (totalDimens - (Math.abs(parseInt(value)))); tickerLoop(newSpeed); }); } else { slider.viewport.hover(function () { el.stop(); }, function () { totalDimens = 0; slider.children.each(function (index) { totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true); }); ratio = slider.settings.speed / totalDimens; property = slider.settings.mode === 'horizontal' ? 'left' : 'top'; newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property))))); tickerLoop(newSpeed); }); } }
            tickerLoop();
        }; var tickerLoop = function (resumeSpeed) {
            var speed = resumeSpeed ? resumeSpeed : slider.settings.speed, position = { left: 0, top: 0 }, reset = { left: 0, top: 0 }, animateProperty, resetValue, params; if (slider.settings.autoDirection === 'next') { position = el.find('.bx-clone').first().position(); } else { reset = slider.children.first().position(); }
            animateProperty = slider.settings.mode === 'horizontal' ? -position.left : -position.top; resetValue = slider.settings.mode === 'horizontal' ? -reset.left : -reset.top; params = { resetValue: resetValue }; setPositionProperty(animateProperty, 'ticker', speed, params);
        }; var isOnScreen = function (el) { var win = $(window), viewport = { top: win.scrollTop(), left: win.scrollLeft() }, bounds = el.offset(); viewport.right = viewport.left + win.width(); viewport.bottom = viewport.top + win.height(); bounds.right = bounds.left + el.outerWidth(); bounds.bottom = bounds.top + el.outerHeight(); return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom)); }; var keyPress = function (e) { var activeElementTag = document.activeElement.tagName.toLowerCase(), tagFilters = 'input|textarea', p = new RegExp(activeElementTag, ['i']), result = p.exec(tagFilters); if (result == null && isOnScreen(el)) { if (e.keyCode === 39) { clickNextBind(e); return false; } else if (e.keyCode === 37) { clickPrevBind(e); return false; } } }; var initTouch = function () { slider.touch = { start: { x: 0, y: 0 }, end: { x: 0, y: 0 } }; slider.viewport.on('touchstart MSPointerDown pointerdown', onTouchStart); slider.viewport.on('click', '.bxslider a', function (e) { if (slider.viewport.hasClass('click-disabled')) { e.preventDefault(); slider.viewport.removeClass('click-disabled'); } }); }; var onTouchStart = function (e) {
            if (e.type !== 'touchstart' && e.button !== 0) { return; }
            e.preventDefault(); slider.controls.el.addClass('disabled'); if (slider.working) { slider.controls.el.removeClass('disabled'); } else {
                slider.touch.originalPos = el.position(); var orig = e.originalEvent, touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig]; var chromePointerEvents = typeof PointerEvent === 'function'; if (chromePointerEvents) { if (orig.pointerId === undefined) { return; } }
                slider.touch.start.x = touchPoints[0].pageX; slider.touch.start.y = touchPoints[0].pageY; if (slider.viewport.get(0).setPointerCapture) { slider.pointerId = orig.pointerId; slider.viewport.get(0).setPointerCapture(slider.pointerId); }
                slider.originalClickTarget = orig.originalTarget || orig.target; slider.originalClickButton = orig.button; slider.originalClickButtons = orig.buttons; slider.originalEventType = orig.type; slider.hasMove = false; slider.viewport.on('touchmove MSPointerMove pointermove', onTouchMove); slider.viewport.on('touchend MSPointerUp pointerup', onTouchEnd); slider.viewport.on('MSPointerCancel pointercancel', onPointerCancel);
            }
        }; var onPointerCancel = function (e) { e.preventDefault(); setPositionProperty(slider.touch.originalPos.left, 'reset', 0); slider.controls.el.removeClass('disabled'); slider.viewport.off('MSPointerCancel pointercancel', onPointerCancel); slider.viewport.off('touchmove MSPointerMove pointermove', onTouchMove); slider.viewport.off('touchend MSPointerUp pointerup', onTouchEnd); if (slider.viewport.get(0).releasePointerCapture) { slider.viewport.get(0).releasePointerCapture(slider.pointerId); } }; var onTouchMove = function (e) {
            var orig = e.originalEvent, touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig], xMovement = Math.abs(touchPoints[0].pageX - slider.touch.start.x), yMovement = Math.abs(touchPoints[0].pageY - slider.touch.start.y), value = 0, change = 0; slider.hasMove = true; if ((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX) { e.preventDefault(); } else if ((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY) { e.preventDefault(); }
            if (e.type !== 'touchmove') { e.preventDefault(); }
            if (slider.settings.mode !== 'fade' && slider.settings.oneToOneTouch) {
                if (slider.settings.mode === 'horizontal') { change = touchPoints[0].pageX - slider.touch.start.x; value = slider.touch.originalPos.left + change; } else { change = touchPoints[0].pageY - slider.touch.start.y; value = slider.touch.originalPos.top + change; }
                setPositionProperty(value, 'reset', 0);
            }
        }; var onTouchEnd = function (e) {
            e.preventDefault(); slider.viewport.off('touchmove MSPointerMove pointermove', onTouchMove); slider.controls.el.removeClass('disabled'); var orig = e.originalEvent, touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig], value = 0, distance = 0; slider.touch.end.x = touchPoints[0].pageX; slider.touch.end.y = touchPoints[0].pageY; if (slider.settings.mode === 'fade') {
                distance = Math.abs(slider.touch.start.x - slider.touch.end.x); if (distance >= slider.settings.swipeThreshold) {
                    if (slider.touch.start.x > slider.touch.end.x) { el.goToNextSlide(); } else { el.goToPrevSlide(); }
                    el.stopAuto();
                }
            } else {
                if (slider.settings.mode === 'horizontal') { distance = slider.touch.end.x - slider.touch.start.x; value = slider.touch.originalPos.left; } else { distance = slider.touch.end.y - slider.touch.start.y; value = slider.touch.originalPos.top; }
                if (!slider.settings.infiniteLoop && ((slider.active.index === 0 && distance > 0) || (slider.active.last && distance < 0))) { setPositionProperty(value, 'reset', 200); } else {
                    if (Math.abs(distance) >= slider.settings.swipeThreshold) {
                        if (distance < 0) { el.goToNextSlide(); } else { el.goToPrevSlide(); }
                        el.stopAuto();
                    } else { setPositionProperty(value, 'reset', 200); }
                }
            }
            slider.viewport.off('touchend MSPointerUp pointerup', onTouchEnd); if (slider.viewport.get(0).releasePointerCapture) { slider.viewport.get(0).releasePointerCapture(slider.pointerId); }
            if (slider.hasMove === false && (slider.originalClickButton === 0 || slider.originalEventType === 'touchstart')) { $(slider.originalClickTarget).trigger({ type: 'click', button: slider.originalClickButton, buttons: slider.originalClickButtons }); }
        }; var resizeWindow = function (e) {
            if (!slider.initialized) { return; }
            if (slider.working) { window.setTimeout(resizeWindow, 10); } else { var windowWidthNew = $(window).width(), windowHeightNew = $(window).height(); if (windowWidth !== windowWidthNew || windowHeight !== windowHeightNew) { windowWidth = windowWidthNew; windowHeight = windowHeightNew; el.redrawSlider(); slider.settings.onSliderResize.call(el, slider.active.index); } }
        }; var applyAriaHiddenAttributes = function (startVisibleIndex) { var numberOfSlidesShowing = getNumberSlidesShowing(); if (slider.settings.ariaHidden && !slider.settings.ticker) { slider.children.attr('aria-hidden', 'true'); slider.children.slice(startVisibleIndex, startVisibleIndex + numberOfSlidesShowing).attr('aria-hidden', 'false'); } }; var setSlideIndex = function (slideIndex) { if (slideIndex < 0) { if (slider.settings.infiniteLoop) { return getPagerQty() - 1; } else { return slider.active.index; } } else if (slideIndex >= getPagerQty()) { if (slider.settings.infiniteLoop) { return 0; } else { return slider.active.index; } } else { return slideIndex; } }; el.goToSlide = function (slideIndex, direction) {
            var performTransition = true, moveBy = 0, position = { left: 0, top: 0 }, lastChild = null, lastShowingIndex, eq, value, requestEl; slider.oldIndex = slider.active.index; slider.active.index = setSlideIndex(slideIndex); if (slider.working || slider.active.index === slider.oldIndex) { return; }
            slider.working = true; performTransition = slider.settings.onSlideBefore.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index); if (typeof (performTransition) !== 'undefined' && !performTransition) { slider.active.index = slider.oldIndex; slider.working = false; return; }
            if (direction === 'next') { if (!slider.settings.onSlideNext.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) { performTransition = false; } } else if (direction === 'prev') { if (!slider.settings.onSlidePrev.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) { performTransition = false; } }
            slider.active.last = slider.active.index >= getPagerQty() - 1; if (slider.settings.pager || slider.settings.pagerCustom) { updatePagerActive(slider.active.index); }
            if (slider.settings.controls) { updateDirectionControls(); }
            if (slider.settings.mode === 'fade') {
                if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) { slider.viewport.animate({ height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed); }
                slider.children.filter(':visible').fadeOut(slider.settings.speed).css({ zIndex: 0 }); slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function () { $(this).css('zIndex', slider.settings.slideZIndex); updateAfterSlideTransition(); });
            } else {
                if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) { slider.viewport.animate({ height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed); }
                if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) { if (slider.settings.mode === 'horizontal') { lastChild = slider.children.eq(slider.children.length - 1); position = lastChild.position(); moveBy = slider.viewport.width() - lastChild.outerWidth(); } else { lastShowingIndex = slider.children.length - slider.settings.minSlides; position = slider.children.eq(lastShowingIndex).position(); } } else if (slider.carousel && slider.active.last && direction === 'prev') { eq = slider.settings.moveSlides === 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides); lastChild = el.children('.bx-clone').eq(eq); position = lastChild.position(); } else if (direction === 'next' && slider.active.index === 0) { position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position(); slider.active.last = false; } else if (slideIndex >= 0) { requestEl = slideIndex * parseInt(getMoveBy()); position = slider.children.eq(requestEl).position(); }
                if (typeof (position) !== 'undefined') { value = slider.settings.mode === 'horizontal' ? -(position.left - moveBy) : -position.top; setPositionProperty(value, 'slide', slider.settings.speed); }
                slider.working = false;
            }
            if (slider.settings.ariaHidden) { applyAriaHiddenAttributes(slider.active.index * getMoveBy()); }
        }; el.goToNextSlide = function () {
            if (!slider.settings.infiniteLoop && slider.active.last) { return; }
            if (slider.working === true) { return; }
            var pagerIndex = parseInt(slider.active.index) + 1; el.goToSlide(pagerIndex, 'next');
        }; el.goToPrevSlide = function () {
            if (!slider.settings.infiniteLoop && slider.active.index === 0) { return; }
            if (slider.working === true) { return; }
            var pagerIndex = parseInt(slider.active.index) - 1; el.goToSlide(pagerIndex, 'prev');
        }; el.startAuto = function (preventControlUpdate) {
            if (slider.interval) { return; }
            slider.interval = setInterval(function () { if (slider.settings.autoDirection === 'next') { el.goToNextSlide(); } else { el.goToPrevSlide(); } }, slider.settings.pause); slider.settings.onAutoChange.call(el, true); if (slider.settings.autoControls && preventControlUpdate !== true) { updateAutoControls('stop'); }
        }; el.stopAuto = function (preventControlUpdate) {
            if (slider.autoPaused) slider.autoPaused = false; if (!slider.interval) { return; }
            clearInterval(slider.interval); slider.interval = null; slider.settings.onAutoChange.call(el, false); if (slider.settings.autoControls && preventControlUpdate !== true) { updateAutoControls('start'); }
        }; el.getCurrentSlide = function () { return slider.active.index; }; el.getCurrentSlideElement = function () { return slider.children.eq(slider.active.index); }; el.getSlideElement = function (index) { return slider.children.eq(index); }; el.getSlideCount = function () { return slider.children.length; }; el.isWorking = function () { return slider.working; }; el.redrawSlider = function () {
            slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth()); slider.viewport.css('height', getViewportHeight()); if (!slider.settings.ticker) { setSlidePosition(); }
            if (slider.active.last) { slider.active.index = getPagerQty() - 1; }
            if (slider.active.index >= getPagerQty()) { slider.active.last = true; }
            if (slider.settings.pager && !slider.settings.pagerCustom) { populatePager(); updatePagerActive(slider.active.index); }
            if (slider.settings.ariaHidden) { applyAriaHiddenAttributes(slider.active.index * getMoveBy()); }
        }; el.destroySlider = function () {
            if (!slider.initialized) { return; }
            slider.initialized = false; $('.bx-clone', this).remove(); slider.children.each(function () { if ($(this).data('origStyle') !== undefined) { $(this).attr('style', $(this).data('origStyle')); } else { $(this).removeAttr('style'); } }); if ($(this).data('origStyle') !== undefined) { this.attr('style', $(this).data('origStyle')); } else { $(this).removeAttr('style'); }
            $(this).unwrap().unwrap(); if (slider.controls.el) { slider.controls.el.remove(); }
            if (slider.controls.next) { slider.controls.next.remove(); }
            if (slider.controls.prev) { slider.controls.prev.remove(); }
            if (slider.pagerEl && slider.settings.controls && !slider.settings.pagerCustom) { slider.pagerEl.remove(); }
            $('.bx-caption', this).remove(); if (slider.controls.autoEl) { slider.controls.autoEl.remove(); }
            clearInterval(slider.interval); if (slider.settings.responsive) { $(window).off('resize', resizeWindow); }
            if (slider.settings.keyboardEnabled) { $(document).off('keydown', keyPress); }
            $(this).removeData('bxSlider'); $(window).off('blur', windowBlurHandler).off('focus', windowFocusHandler);
        }; el.reloadSlider = function (settings) {
            if (settings !== undefined) { options = settings; }
            el.destroySlider(); init(); $(el).data('bxSlider', this);
        }; init(); $(el).data('bxSlider', this); return this;
    };
})(jQuery);